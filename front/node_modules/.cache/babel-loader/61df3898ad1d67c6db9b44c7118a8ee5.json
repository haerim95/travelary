{"ast":null,"code":"import produce from 'immer'; // 초기 설정\n\nexport const initialState = {\n  categoryList: [],\n  postlist: [],\n  categoryCode: 1,\n  // 공유/개인 인지 확인\n  imagePaths: [],\n  // 이미지 업로드할때 이미지 경로 저장\n  hasMoreCategory: true,\n  // 카테고리가 없어졌을때\n  hasMorePost: true,\n  // 카테고리가 없어졌을때\n  loadPostLoading: false,\n  // 포스트 추가시 로딩\n  loadPostDone: false,\n  loadPostError: false,\n  loadCategoryLoading: false,\n  // 카테고리 추가시 로딩\n  loadCategoryDone: false,\n  loadCategoryError: false,\n  addPostLoading: false,\n  // 포스트 추가시 로딩\n  addPostDone: false,\n  addPostError: false,\n  addCategoryLoading: false,\n  // 카테고리 추가시 로딩\n  addCategoryDone: false,\n  addCategoryError: false,\n  removeCategoryLoading: false,\n  // 카테고리 삭세시 로딩\n  removeCategoryDone: false,\n  removeCategoryError: false,\n  removePostLoading: false,\n  // 포스트 삭제시 로딩\n  removePostDone: false,\n  removePostError: false,\n  uploadImagesLoading: false,\n  // 포스트 삭제시 로딩\n  uploadImagesDone: false,\n  uploadImagesError: false\n}; //? 액션 함수 시작\n// 카테고리 추가\n// 액션 타입을 상수로 빼준 이유 : 오타방지\n\nexport const UPLOAD_POST_IMAGES_QUILL_REQUEST = 'UPLOAD_POST_IMAGES_QUILL_REQUEST';\nexport const UPLOAD_POST_IMAGES_QUILL_SUCCESS = 'UPLOAD_POST_IMAGES_QUILL_SUCCESS';\nexport const UPLOAD_POST_IMAGES_QUILL_FAILURE = 'UPLOAD_POST_IMAGES_QUILL_FAILURE';\nexport const UPLOAD_POST_IMAGES_REQUEST = 'UPLOAD_POST_IMAGES_REQUEST';\nexport const UPLOAD_POST_IMAGES_SUCCESS = 'UPLOAD_POST_IMAGES_SUCCESS';\nexport const UPLOAD_POST_IMAGES_FAILURE = 'UPLOAD_POST_IMAGES_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const LOAD_CATEGORY_REQUEST = 'LOAD_CATEGORY_REQUEST';\nexport const LOAD_CATEGORY_SUCCESS = 'LOAD_CATEGORY_SUCCESS';\nexport const LOAD_CATEGORY_FAILURE = 'LOAD_CATEGORY_FAILURE';\nexport const ADD_CATEGORY_REQUEST = 'ADD_CATEGORY_REQUEST';\nexport const ADD_CATEGORY_SUCCESS = 'ADD_CATEGORY_SUCCESS';\nexport const ADD_CATEGORY_FAILURE = 'ADD_CATEGORY_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const SHARE_CATEGORY_REQUEST = 'SHARE_CATEGORY_REQUEST';\nexport const SHARE_CATEGORY_SUCCESS = 'SHARE_CATEGORY_SUCCESS';\nexport const SHARE_CATEGORY_FAILURE = 'SHARE_CATEGORY_FAILURE'; // 카테고리, 게시글 삭제시 액션..\n\nexport const REMOVE_CATEGORY_REQUEST = 'REMOVE_CATEGORY_REQUEST';\nexport const REMOVE_CATEGORY_SUCCESS = 'REMOVE_CATEGORY_SUCCESS';\nexport const REMOVE_CATEGORY_FAILURE = 'REMOVE_CATEGORY_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE'; // 액션 타입 불러오기, 나중에 컴포넌트에서 onSubmit 같은 액션으로 해당 타입액션을 불러와준다.\n\nexport const addCategoryAction = data => ({\n  type: ADD_CATEGORY_REQUEST,\n  data\n});\nexport const addPostAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n}); // 리듀서 함수\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POST_REQUEST:\n      if (action.lastId) {\n        //  기존과 같이...\n        draft.loadPostLoading = true;\n        draft.addPostDone = false;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n      } else {\n        draft.postlist = [];\n        draft.addPostDone = false;\n      }\n\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.postlist = draft.postlist.concat(action.data);\n      draft.hasMorePost = action.data.length === 9;\n      draft.imagePaths = [];\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadCategoryLoading = false;\n      draft.loadCategoryError = action.error;\n      break;\n\n    case LOAD_CATEGORY_REQUEST:\n      if (action.lastId) {\n        //  기존과 같이...\n        draft.addCategoryDone = false;\n        draft.loadCategoryLoading = true;\n        draft.loadCategoryDone = false;\n        draft.loadCategoryError = null;\n      } else {\n        draft.addCategoryDone = false;\n        draft.categoryList = [];\n      } // if (draft.categoryList.find(action.data.lastId) === null) {\n      //   const categoryList = [];\n      //   return categoryList;\n      // }\n\n\n      break;\n\n    case LOAD_CATEGORY_SUCCESS:\n      draft.loadCategoryLoading = false;\n      draft.loadCategoryDone = true;\n      draft.categoryList = draft.categoryList.concat(action.data);\n      draft.hasMoreCategory = action.data.length === 9;\n      draft.imagePaths = [];\n      break;\n\n    case LOAD_CATEGORY_FAILURE:\n      draft.loadCategoryLoading = false;\n      draft.loadCategoryError = action.error;\n      break;\n\n    case ADD_CATEGORY_REQUEST:\n      draft.addCategoryLoading = true;\n      draft.addCategoryDone = false;\n      draft.addCategoryError = null;\n      break;\n\n    case ADD_CATEGORY_SUCCESS:\n      draft.addCategoryLoading = false;\n      draft.addCategoryDone = true;\n      draft.categoryList.unshift(action.data); // draft.imagePaths = [];\n\n      break;\n\n    case ADD_CATEGORY_FAILURE:\n      draft.addCategoryLoading = false;\n      draft.addCategoryError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      // const category = draft.categoryList.find(\n      //   (v) => v.id !== action.data.PostCategoryId\n      // );\n      // category.Posts.unshift(action.data);\n      draft.postlist.unshift(action.data); // draft.posts = draft.posts.concat(action.data);\n\n      draft.addPostLoading = false;\n      draft.addPostDone = true; // draft.posts.unshift(action.data);\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_CATEGORY_REQUEST:\n      draft.removeCategoryLoading = true;\n      draft.removeCategoryDone = false;\n      draft.removeCategoryError = null;\n      break;\n\n    case REMOVE_CATEGORY_SUCCESS:\n      draft.removeCategoryLoading = false;\n      draft.removeCategoryDone = true;\n      draft.categoryList = draft.categoryList.filter(v => v.id !== action.data.CategoryId);\n      break;\n\n    case REMOVE_CATEGORY_FAILURE:\n      draft.removeCategoryLoading = false;\n      draft.removeCategoryError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removeCategoryError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.postList = draft.postList.filter(v => v.id === action.data);\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.imagePaths = action.data;\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      break;\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case UPLOAD_POST_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_POST_IMAGES_SUCCESS:\n      draft.imagePaths = action.data;\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      break;\n\n    case UPLOAD_POST_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case UPLOAD_POST_IMAGES_QUILL_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_POST_IMAGES_QUILL_SUCCESS:\n      draft.imagePaths = action.data;\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      break;\n\n    case UPLOAD_POST_IMAGES_QUILL_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["/Users/haerim/haerim/workspace/리액트 포트폴리오/travelary/front/src/reducer/post.js"],"names":["produce","initialState","categoryList","postlist","categoryCode","imagePaths","hasMoreCategory","hasMorePost","loadPostLoading","loadPostDone","loadPostError","loadCategoryLoading","loadCategoryDone","loadCategoryError","addPostLoading","addPostDone","addPostError","addCategoryLoading","addCategoryDone","addCategoryError","removeCategoryLoading","removeCategoryDone","removeCategoryError","removePostLoading","removePostDone","removePostError","uploadImagesLoading","uploadImagesDone","uploadImagesError","UPLOAD_POST_IMAGES_QUILL_REQUEST","UPLOAD_POST_IMAGES_QUILL_SUCCESS","UPLOAD_POST_IMAGES_QUILL_FAILURE","UPLOAD_POST_IMAGES_REQUEST","UPLOAD_POST_IMAGES_SUCCESS","UPLOAD_POST_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_CATEGORY_REQUEST","LOAD_CATEGORY_SUCCESS","LOAD_CATEGORY_FAILURE","ADD_CATEGORY_REQUEST","ADD_CATEGORY_SUCCESS","ADD_CATEGORY_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","SHARE_CATEGORY_REQUEST","SHARE_CATEGORY_SUCCESS","SHARE_CATEGORY_FAILURE","REMOVE_CATEGORY_REQUEST","REMOVE_CATEGORY_SUCCESS","REMOVE_CATEGORY_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_IMAGE","addCategoryAction","data","type","addPostAction","reducer","state","action","draft","lastId","concat","length","error","unshift","filter","v","id","CategoryId","postList","i"],"mappings":"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","sourcesContent":["import produce from 'immer';\n\n// 초기 설정\nexport const initialState = {\n  categoryList: [],\n  postlist: [],\n  categoryCode: 1, // 공유/개인 인지 확인\n  imagePaths: [], // 이미지 업로드할때 이미지 경로 저장\n  hasMoreCategory: true, // 카테고리가 없어졌을때\n  hasMorePost: true, // 카테고리가 없어졌을때\n  loadPostLoading: false, // 포스트 추가시 로딩\n  loadPostDone: false,\n  loadPostError: false,\n  loadCategoryLoading: false, // 카테고리 추가시 로딩\n  loadCategoryDone: false,\n  loadCategoryError: false,\n  addPostLoading: false, // 포스트 추가시 로딩\n  addPostDone: false,\n  addPostError: false,\n  addCategoryLoading: false, // 카테고리 추가시 로딩\n  addCategoryDone: false,\n  addCategoryError: false,\n  removeCategoryLoading: false, // 카테고리 삭세시 로딩\n  removeCategoryDone: false,\n  removeCategoryError: false,\n  removePostLoading: false, // 포스트 삭제시 로딩\n  removePostDone: false,\n  removePostError: false,\n  uploadImagesLoading: false, // 포스트 삭제시 로딩\n  uploadImagesDone: false,\n  uploadImagesError: false,\n};\n\n//? 액션 함수 시작\n// 카테고리 추가\n// 액션 타입을 상수로 빼준 이유 : 오타방지\n\nexport const UPLOAD_POST_IMAGES_QUILL_REQUEST =\n  'UPLOAD_POST_IMAGES_QUILL_REQUEST';\nexport const UPLOAD_POST_IMAGES_QUILL_SUCCESS =\n  'UPLOAD_POST_IMAGES_QUILL_SUCCESS';\nexport const UPLOAD_POST_IMAGES_QUILL_FAILURE =\n  'UPLOAD_POST_IMAGES_QUILL_FAILURE';\n\nexport const UPLOAD_POST_IMAGES_REQUEST = 'UPLOAD_POST_IMAGES_REQUEST';\nexport const UPLOAD_POST_IMAGES_SUCCESS = 'UPLOAD_POST_IMAGES_SUCCESS';\nexport const UPLOAD_POST_IMAGES_FAILURE = 'UPLOAD_POST_IMAGES_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const LOAD_CATEGORY_REQUEST = 'LOAD_CATEGORY_REQUEST';\nexport const LOAD_CATEGORY_SUCCESS = 'LOAD_CATEGORY_SUCCESS';\nexport const LOAD_CATEGORY_FAILURE = 'LOAD_CATEGORY_FAILURE';\n\nexport const ADD_CATEGORY_REQUEST = 'ADD_CATEGORY_REQUEST';\nexport const ADD_CATEGORY_SUCCESS = 'ADD_CATEGORY_SUCCESS';\nexport const ADD_CATEGORY_FAILURE = 'ADD_CATEGORY_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const SHARE_CATEGORY_REQUEST = 'SHARE_CATEGORY_REQUEST';\nexport const SHARE_CATEGORY_SUCCESS = 'SHARE_CATEGORY_SUCCESS';\nexport const SHARE_CATEGORY_FAILURE = 'SHARE_CATEGORY_FAILURE';\n\n// 카테고리, 게시글 삭제시 액션..\nexport const REMOVE_CATEGORY_REQUEST = 'REMOVE_CATEGORY_REQUEST';\nexport const REMOVE_CATEGORY_SUCCESS = 'REMOVE_CATEGORY_SUCCESS';\nexport const REMOVE_CATEGORY_FAILURE = 'REMOVE_CATEGORY_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\n// 액션 타입 불러오기, 나중에 컴포넌트에서 onSubmit 같은 액션으로 해당 타입액션을 불러와준다.\nexport const addCategoryAction = (data) => ({\n  type: ADD_CATEGORY_REQUEST,\n  data,\n});\n\nexport const addPostAction = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\n\n// 리듀서 함수\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성 지키면서)\nconst reducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POST_REQUEST:\n        if (action.lastId) {\n          //  기존과 같이...\n          draft.loadPostLoading = true;\n          draft.addPostDone = false;\n\n          draft.loadPostDone = false;\n          draft.loadPostError = null;\n        } else {\n          draft.postlist = [];\n          draft.addPostDone = false;\n        }\n\n        break;\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.postlist = draft.postlist.concat(action.data);\n        draft.hasMorePost = action.data.length === 9;\n        draft.imagePaths = [];\n        break;\n      case LOAD_POST_FAILURE:\n        draft.loadCategoryLoading = false;\n        draft.loadCategoryError = action.error;\n        break;\n      case LOAD_CATEGORY_REQUEST:\n        if (action.lastId) {\n          //  기존과 같이...\n          draft.addCategoryDone = false;\n          draft.loadCategoryLoading = true;\n          draft.loadCategoryDone = false;\n          draft.loadCategoryError = null;\n        } else {\n          draft.addCategoryDone = false;\n          draft.categoryList = [];\n        }\n        // if (draft.categoryList.find(action.data.lastId) === null) {\n        //   const categoryList = [];\n        //   return categoryList;\n        // }\n        break;\n      case LOAD_CATEGORY_SUCCESS:\n        draft.loadCategoryLoading = false;\n        draft.loadCategoryDone = true;\n        draft.categoryList = draft.categoryList.concat(action.data);\n        draft.hasMoreCategory = action.data.length === 9;\n        draft.imagePaths = [];\n        break;\n      case LOAD_CATEGORY_FAILURE:\n        draft.loadCategoryLoading = false;\n        draft.loadCategoryError = action.error;\n        break;\n      case ADD_CATEGORY_REQUEST:\n        draft.addCategoryLoading = true;\n        draft.addCategoryDone = false;\n        draft.addCategoryError = null;\n        break;\n      case ADD_CATEGORY_SUCCESS:\n        draft.addCategoryLoading = false;\n        draft.addCategoryDone = true;\n        draft.categoryList.unshift(action.data);\n        // draft.imagePaths = [];\n        break;\n      case ADD_CATEGORY_FAILURE:\n        draft.addCategoryLoading = false;\n        draft.addCategoryError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        // const category = draft.categoryList.find(\n        //   (v) => v.id !== action.data.PostCategoryId\n        // );\n        // category.Posts.unshift(action.data);\n        draft.postlist.unshift(action.data);\n\n        // draft.posts = draft.posts.concat(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        // draft.posts.unshift(action.data);\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case REMOVE_CATEGORY_REQUEST:\n        draft.removeCategoryLoading = true;\n        draft.removeCategoryDone = false;\n        draft.removeCategoryError = null;\n        break;\n      case REMOVE_CATEGORY_SUCCESS:\n        draft.removeCategoryLoading = false;\n        draft.removeCategoryDone = true;\n        draft.categoryList = draft.categoryList.filter(\n          (v) => v.id !== action.data.CategoryId\n        );\n        break;\n      case REMOVE_CATEGORY_FAILURE:\n        draft.removeCategoryLoading = false;\n        draft.removeCategoryError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removeCategoryError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.postList = draft.postList.filter((v) => v.id === action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      case UPLOAD_POST_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_POST_IMAGES_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      case UPLOAD_POST_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      case UPLOAD_POST_IMAGES_QUILL_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n      case UPLOAD_POST_IMAGES_QUILL_SUCCESS:\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      case UPLOAD_POST_IMAGES_QUILL_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n        break;\n      default:\n        break;\n    }\n  });\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}