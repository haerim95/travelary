{"ast":null,"code":"//jwt 토큰 디코딩 팩키지 참조\nimport jwtDecode from 'jwt-decode'; //사용자 인증 토큰 조회하기 유틸함수\n\nconst getJWTToken = () => {\n  const storageToken = window.localStorage.getItem('jwtToken');\n\n  if (storageToken !== undefined) {\n    return storageToken;\n  } else {\n    return '발급된 토큰이 없습니다.';\n  }\n}; //현재 사용자 로그인 여부 체크 함수\n\n\nconst isMemberLogined = e => {\n  const storageToken = window.localStorage.getItem('jwtToken');\n  console.log(`${e} 에서 호출한 로그인 상태체크 함수(return boolean)입니다. null 이면 로긴해서 토큰 받기 ==>`, storageToken);\n\n  if (storageToken != null) {\n    return true;\n  } else {\n    return false;\n  }\n}; //JWT 토큰 기반 로그인 사용자 정보 추출함수\n\n\nconst getLoginMember = () => {\n  const storageToken = window.localStorage.getItem('jwtToken');\n\n  if (storageToken == undefined) {\n    return null;\n  } //토큰에서 디코딩된 값을 추출한다.\n\n\n  const decoded = jwtDecode(storageToken);\n  const member = {\n    memberId: decoded.memberId,\n    email: decoded.email,\n    userName: decoded.userName\n  };\n  return member;\n}; // const getLoginMemberInfo = () => {\n//   const loginMemberInfo = window.localStorage.getItem('loginMemberInfo');\n//   if (loginMemberInfo == undefined) {\n//     return null;\n//   }\n//   return loginMemberInfo;\n// };\n\n\nexport { getJWTToken, isMemberLogined, getLoginMember };","map":{"version":3,"sources":["/Users/haerim/haerim/workspace/리액트 포트폴리오/travelary/front/src/helpers/authUtils.js"],"names":["jwtDecode","getJWTToken","storageToken","window","localStorage","getItem","undefined","isMemberLogined","e","console","log","getLoginMember","decoded","member","memberId","email","userName"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,YAAY,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAArB;;AACA,MAAIH,YAAY,KAAKI,SAArB,EAAgC;AAC9B,WAAOJ,YAAP;AACD,GAFD,MAEO;AACL,WAAO,eAAP;AACD;AACF,CAPD,C,CASA;;;AACA,MAAMK,eAAe,GAAIC,CAAD,IAAO;AAC7B,QAAMN,YAAY,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAArB;AAEAI,EAAAA,OAAO,CAACC,GAAR,CACG,GAAEF,CAAE,gEADP,EAEEN,YAFF;;AAKA,MAAIA,YAAY,IAAI,IAApB,EAA0B;AACxB,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CAbD,C,CAeA;;;AACA,MAAMS,cAAc,GAAG,MAAM;AAC3B,QAAMT,YAAY,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAArB;;AAEA,MAAIH,YAAY,IAAII,SAApB,EAA+B;AAC7B,WAAO,IAAP;AACD,GAL0B,CAM3B;;;AACA,QAAMM,OAAO,GAAGZ,SAAS,CAACE,YAAD,CAAzB;AACA,QAAMW,MAAM,GAAG;AACbC,IAAAA,QAAQ,EAAEF,OAAO,CAACE,QADL;AAEbC,IAAAA,KAAK,EAAEH,OAAO,CAACG,KAFF;AAGbC,IAAAA,QAAQ,EAAEJ,OAAO,CAACI;AAHL,GAAf;AAKA,SAAOH,MAAP;AACD,CAdD,C,CAgBA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAEA,SAASZ,WAAT,EAAsBM,eAAtB,EAAuCI,cAAvC","sourcesContent":["//jwt 토큰 디코딩 팩키지 참조\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n//사용자 인증 토큰 조회하기 유틸함수\r\nconst getJWTToken = () => {\r\n  const storageToken = window.localStorage.getItem('jwtToken');\r\n  if (storageToken !== undefined) {\r\n    return storageToken;\r\n  } else {\r\n    return '발급된 토큰이 없습니다.';\r\n  }\r\n};\r\n\r\n//현재 사용자 로그인 여부 체크 함수\r\nconst isMemberLogined = (e) => {\r\n  const storageToken = window.localStorage.getItem('jwtToken');\r\n\r\n  console.log(\r\n    `${e} 에서 호출한 로그인 상태체크 함수(return boolean)입니다. null 이면 로긴해서 토큰 받기 ==>`,\r\n    storageToken\r\n  );\r\n\r\n  if (storageToken != null) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n//JWT 토큰 기반 로그인 사용자 정보 추출함수\r\nconst getLoginMember = () => {\r\n  const storageToken = window.localStorage.getItem('jwtToken');\r\n\r\n  if (storageToken == undefined) {\r\n    return null;\r\n  }\r\n  //토큰에서 디코딩된 값을 추출한다.\r\n  const decoded = jwtDecode(storageToken);\r\n  const member = {\r\n    memberId: decoded.memberId,\r\n    email: decoded.email,\r\n    userName: decoded.userName,\r\n  };\r\n  return member;\r\n};\r\n\r\n// const getLoginMemberInfo = () => {\r\n//   const loginMemberInfo = window.localStorage.getItem('loginMemberInfo');\r\n\r\n//   if (loginMemberInfo == undefined) {\r\n//     return null;\r\n//   }\r\n\r\n//   return loginMemberInfo;\r\n// };\r\n\r\nexport { getJWTToken, isMemberLogined, getLoginMember };\r\n"]},"metadata":{},"sourceType":"module"}