{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, call, put, delay, takeLatest, throttle } from 'redux-saga/effects'; // saga 이펙트\n\nimport { ADD_CATEGORY_SUCCESS, ADD_CATEGORY_REQUEST, ADD_CATEGORY_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_CATEGORY_REQUEST, REMOVE_CATEGORY_SUCCESS, REMOVE_CATEGORY_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_CATEGORY_REQUEST, LOAD_CATEGORY_SUCCESS, LOAD_CATEGORY_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_POST_IMAGES_REQUEST, UPLOAD_POST_IMAGES_SUCCESS, UPLOAD_POST_IMAGES_FAILURE, UPLOAD_POST_IMAGES_QUILL_REQUEST, UPLOAD_POST_IMAGES_QUILL_SUCCESS, UPLOAD_POST_IMAGES_QUILL_FAILURE } from '../reducer/post'; // ! API 는 제네레이터 함수를 사용하지 않는다.\n// Step 2. 데이터를 api 로 보내준다.\n\nfunction categoryAPI(data) {\n  // 실제 서버에 요청을 보냄\n  return axios.post('/category', data);\n} // Step 1. action에서 데이터 보내서\n\n\nfunction* addCategory(action) {\n  try {\n    const result = yield call(categoryAPI, action.data);\n    yield put({\n      type: ADD_CATEGORY_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_CATEGORY_SUCCESS,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_CATEGORY_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadCategoryAPI(lastId, memberId) {\n  // 실제 서버에 요청을 보냄\n  return axios.get(`/categories?lastId=${lastId || 0}&memberId=${memberId}`);\n}\n\nfunction* loadCategory(action) {\n  try {\n    const result = yield call(loadCategoryAPI, action.lastId, action.memberId);\n    console.log('멤버 아이디는?', action.memberId);\n    yield put({\n      type: LOAD_CATEGORY_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error('로딩에러입니다: ', err);\n    yield put({\n      type: LOAD_CATEGORY_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(lastId, id) {\n  // 실제 서버에 요청을 보냄\n  return axios.get(`/categories/${id}/?lastId=${lastId || 0}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.lastId, action.id);\n    console.log('포스트 로딩 결과 데이ㅓㅌ ㅓ : -------------------------- ', result.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log('포스트 로딩에러입니다: ', err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data, categoryId) {\n  //category/1/post\n  return axios.post(`/category/${categoryId}/post/add`, data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data, action.categoryId);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  //category/1/post\n  return axios.post('/category/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction uploadPostImagesAPI(data) {\n  //category/1/post\n  return axios.post('/category/post/images', data);\n}\n\nfunction* uploadPostImages(action) {\n  try {\n    const result = yield call(uploadPostImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_POST_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_POST_IMAGES_FAILURE,\n      data: err.response.data\n    });\n  }\n} // quill 이미지\n\n\nfunction uploadPostQuillImagesAPI(data) {\n  return axios.post('/category/post/img', data);\n}\n\nfunction* uploadPostQuillImages(action) {\n  try {\n    const result = yield call(uploadPostQuillImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_POST_IMAGES_QUILL_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_POST_IMAGES_QUILL_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removeCategoryAPI(data) {\n  return axios.delete(`/category/${data}`);\n}\n\nfunction* removeCategory(action) {\n  const result = yield call(removeCategoryAPI, action.data);\n\n  try {\n    delay(1000);\n    yield put({\n      type: REMOVE_CATEGORY_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_CATEGORY_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n} // 비동기 액션 생성 함수\n\n\nfunction* watchAddCategory() {\n  // take : ADD_CATEGORY_REQUEST (해당)액션이 실행되기 까지 기다리겠다.\n  // take: 단, 한번밖에 받지 않는다. 한번 실행하면 이벤트 리스너가 사라져버린다. (게시글을 하나밖에 못씀)\n  // ADD_CATEGORY_REQUEST 액션이 실행되면 addCategory 함수가 실행된다. (상단에 있음)\n  // 그래서 무한하게 실행되도록 while(true)문을 감싸서 사용한다. 원래 자바스크립트에선 금지된...코드지만 (무한실행때문에)\n  // 제네레이터 함수는 next() 로 다음 함수를 실행하기 때문에 써도 ok -> 하지만 직관적이지 않으니까\n  // 비동기 방식으로 작동하는 takeEvery를 사용한다. (while문 대체)\n  // 근데 takeEvery는 두번클릭,세번클릭하면 두번,세번이 전부 실행이 된다.\n  // 그래서 takeLatest 를 사용한다. 여러번 요청을 보내도 앞에거 다 무시하고 마지막것만 실행된다. (어휴..) -> 근데 프론트에서만 그렇게 인식한다\n  // 응답은 완료된것 하나 외에는 다 무시하지만, 요청은 무시되지 않는다는 소리 그래서 서버쪽에서 데이터 중복 검사를 따로 해주어야한다.\n  yield takeLatest(ADD_CATEGORY_REQUEST, addCategory);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemoveCategory() {\n  yield takeLatest(REMOVE_CATEGORY_REQUEST, removeCategory);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadCategory() {\n  yield throttle(3500, LOAD_CATEGORY_REQUEST, loadCategory);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(4000, LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchUploadPostImages() {\n  yield takeLatest(UPLOAD_POST_IMAGES_REQUEST, uploadPostImages);\n}\n\nfunction* watchUploadPostQuillImages() {\n  yield takeLatest(UPLOAD_POST_IMAGES_QUILL_REQUEST, uploadPostQuillImages);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchLoadCategory), fork(watchAddCategory), fork(watchAddPost), fork(watchRemoveCategory), fork(watchRemovePost), fork(watchUploadImages), fork(watchUploadPostImages), fork(watchUploadPostQuillImages)]);\n}","map":{"version":3,"sources":["/Users/haerim/haerim/workspace/리액트 포트폴리오/travelary/front/src/sagas/post.js"],"names":["axios","all","fork","call","put","delay","takeLatest","throttle","ADD_CATEGORY_SUCCESS","ADD_CATEGORY_REQUEST","ADD_CATEGORY_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_CATEGORY_REQUEST","REMOVE_CATEGORY_SUCCESS","REMOVE_CATEGORY_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_CATEGORY_REQUEST","LOAD_CATEGORY_SUCCESS","LOAD_CATEGORY_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_POST_IMAGES_REQUEST","UPLOAD_POST_IMAGES_SUCCESS","UPLOAD_POST_IMAGES_FAILURE","UPLOAD_POST_IMAGES_QUILL_REQUEST","UPLOAD_POST_IMAGES_QUILL_SUCCESS","UPLOAD_POST_IMAGES_QUILL_FAILURE","categoryAPI","data","post","addCategory","action","result","type","id","err","response","loadCategoryAPI","lastId","memberId","get","loadCategory","console","log","error","loadPostAPI","loadPost","addPostAPI","categoryId","addPost","uploadImagesAPI","uploadImages","uploadPostImagesAPI","uploadPostImages","uploadPostQuillImagesAPI","uploadPostQuillImages","removeCategoryAPI","delete","removeCategory","removePostAPI","removePost","watchAddCategory","watchAddPost","watchRemoveCategory","watchRemovePost","watchLoadCategory","watchLoadPost","watchUploadImages","watchUploadPostImages","watchUploadPostQuillImages","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n  all,\n  fork,\n  call,\n  put,\n  delay,\n  takeLatest,\n  throttle,\n} from 'redux-saga/effects'; // saga 이펙트\nimport {\n  ADD_CATEGORY_SUCCESS,\n  ADD_CATEGORY_REQUEST,\n  ADD_CATEGORY_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  REMOVE_CATEGORY_REQUEST,\n  REMOVE_CATEGORY_SUCCESS,\n  REMOVE_CATEGORY_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  LOAD_CATEGORY_REQUEST,\n  LOAD_CATEGORY_SUCCESS,\n  LOAD_CATEGORY_FAILURE,\n  LOAD_POST_REQUEST,\n  LOAD_POST_SUCCESS,\n  LOAD_POST_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  UPLOAD_POST_IMAGES_REQUEST,\n  UPLOAD_POST_IMAGES_SUCCESS,\n  UPLOAD_POST_IMAGES_FAILURE,\n  UPLOAD_POST_IMAGES_QUILL_REQUEST,\n  UPLOAD_POST_IMAGES_QUILL_SUCCESS,\n  UPLOAD_POST_IMAGES_QUILL_FAILURE,\n} from '../reducer/post';\n\n// ! API 는 제네레이터 함수를 사용하지 않는다.\n// Step 2. 데이터를 api 로 보내준다.\nfunction categoryAPI(data) {\n  // 실제 서버에 요청을 보냄\n  return axios.post('/category', data);\n}\n\n// Step 1. action에서 데이터 보내서\nfunction* addCategory(action) {\n  try {\n    const result = yield call(categoryAPI, action.data);\n    yield put({\n      type: ADD_CATEGORY_SUCCESS,\n      data: result.data,\n    });\n    yield put({\n      type: ADD_CATEGORY_SUCCESS,\n      data: result.data.id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_CATEGORY_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction loadCategoryAPI(lastId, memberId) {\n  // 실제 서버에 요청을 보냄\n  return axios.get(`/categories?lastId=${lastId || 0}&memberId=${memberId}`);\n}\n\nfunction* loadCategory(action) {\n  try {\n    const result = yield call(loadCategoryAPI, action.lastId, action.memberId);\n    console.log('멤버 아이디는?', action.memberId);\n    yield put({\n      type: LOAD_CATEGORY_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error('로딩에러입니다: ', err);\n    yield put({\n      type: LOAD_CATEGORY_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction loadPostAPI(lastId, id) {\n  // 실제 서버에 요청을 보냄\n  return axios.get(`/categories/${id}/?lastId=${lastId || 0}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.lastId, action.id);\n    console.log(\n      '포스트 로딩 결과 데이ㅓㅌ ㅓ : -------------------------- ',\n      result.data\n    );\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.log('포스트 로딩에러입니다: ', err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data, categoryId) {\n  //category/1/post\n  return axios.post(`/category/${categoryId}/post/add`, data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data, action.categoryId);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  //category/1/post\n  return axios.post('/category/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction uploadPostImagesAPI(data) {\n  //category/1/post\n  return axios.post('/category/post/images', data);\n}\n\nfunction* uploadPostImages(action) {\n  try {\n    const result = yield call(uploadPostImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_POST_IMAGES_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_POST_IMAGES_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n// quill 이미지\nfunction uploadPostQuillImagesAPI(data) {\n  return axios.post('/category/post/img', data);\n}\n\nfunction* uploadPostQuillImages(action) {\n  try {\n    const result = yield call(uploadPostQuillImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_POST_IMAGES_QUILL_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_POST_IMAGES_QUILL_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removeCategoryAPI(data) {\n  return axios.delete(`/category/${data}`);\n}\n\nfunction* removeCategory(action) {\n  const result = yield call(removeCategoryAPI, action.data);\n  try {\n    delay(1000);\n    yield put({\n      type: REMOVE_CATEGORY_SUCCESS,\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_CATEGORY_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n// 비동기 액션 생성 함수\nfunction* watchAddCategory() {\n  // take : ADD_CATEGORY_REQUEST (해당)액션이 실행되기 까지 기다리겠다.\n  // take: 단, 한번밖에 받지 않는다. 한번 실행하면 이벤트 리스너가 사라져버린다. (게시글을 하나밖에 못씀)\n  // ADD_CATEGORY_REQUEST 액션이 실행되면 addCategory 함수가 실행된다. (상단에 있음)\n  // 그래서 무한하게 실행되도록 while(true)문을 감싸서 사용한다. 원래 자바스크립트에선 금지된...코드지만 (무한실행때문에)\n  // 제네레이터 함수는 next() 로 다음 함수를 실행하기 때문에 써도 ok -> 하지만 직관적이지 않으니까\n  // 비동기 방식으로 작동하는 takeEvery를 사용한다. (while문 대체)\n  // 근데 takeEvery는 두번클릭,세번클릭하면 두번,세번이 전부 실행이 된다.\n  // 그래서 takeLatest 를 사용한다. 여러번 요청을 보내도 앞에거 다 무시하고 마지막것만 실행된다. (어휴..) -> 근데 프론트에서만 그렇게 인식한다\n  // 응답은 완료된것 하나 외에는 다 무시하지만, 요청은 무시되지 않는다는 소리 그래서 서버쪽에서 데이터 중복 검사를 따로 해주어야한다.\n  yield takeLatest(ADD_CATEGORY_REQUEST, addCategory);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemoveCategory() {\n  yield takeLatest(REMOVE_CATEGORY_REQUEST, removeCategory);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadCategory() {\n  yield throttle(3500, LOAD_CATEGORY_REQUEST, loadCategory);\n}\n\nfunction* watchLoadPost() {\n  yield throttle(4000, LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchUploadPostImages() {\n  yield takeLatest(UPLOAD_POST_IMAGES_REQUEST, uploadPostImages);\n}\nfunction* watchUploadPostQuillImages() {\n  yield takeLatest(UPLOAD_POST_IMAGES_QUILL_REQUEST, uploadPostQuillImages);\n}\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchLoadPost),\n    fork(watchLoadCategory),\n    fork(watchAddCategory),\n    fork(watchAddPost),\n    fork(watchRemoveCategory),\n    fork(watchRemovePost),\n    fork(watchUploadImages),\n    fork(watchUploadPostImages),\n    fork(watchUploadPostQuillImages),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}